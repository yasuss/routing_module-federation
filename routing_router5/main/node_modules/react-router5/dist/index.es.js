import React, { Component, useContext, useState, useEffect } from 'react';
import { shouldUpdateNode } from 'router5-transition-path';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var createContext = React.createContext;
var routeContext = createContext(null);
var routerContext = createContext(null);

var RouterProvider = /** @class */ (function (_super) {
    __extends(RouterProvider, _super);
    function RouterProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.routeState = {
            route: props.router.getState(),
            previousRoute: null
        };
        if (typeof window !== 'undefined') {
            var listener = function (_a) {
                var route = _a.route, previousRoute = _a.previousRoute;
                _this.routeState = {
                    route: route,
                    previousRoute: previousRoute
                };
                if (_this.mounted) {
                    _this.forceUpdate();
                }
            };
            _this.unsubscribe = _this.props.router.subscribe(listener);
        }
        return _this;
    }
    RouterProvider.prototype.componentDidMount = function () {
        this.mounted = true;
    };
    RouterProvider.prototype.componentWillUnmount = function () {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
    };
    RouterProvider.prototype.render = function () {
        return (React.createElement(routerContext.Provider, { value: this.props.router },
            React.createElement(routeContext.Provider, { value: __assign({ router: this.props.router }, this.routeState) }, this.props.children)));
    };
    return RouterProvider;
}(React.PureComponent));

var BaseLink = /** @class */ (function (_super) {
    __extends(BaseLink, _super);
    function BaseLink(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.router = _this.props.router;
        _this.isActive = _this.isActive.bind(_this);
        _this.clickHandler = _this.clickHandler.bind(_this);
        _this.callback = _this.callback.bind(_this);
        _this.state = { active: _this.isActive() };
        return _this;
    }
    BaseLink.prototype.buildUrl = function (routeName, routeParams) {
        //@ts-ignore
        if (this.router.buildUrl) {
            //@ts-ignore
            return this.router.buildUrl(routeName, routeParams);
        }
        return this.router.buildPath(routeName, routeParams);
    };
    BaseLink.prototype.isActive = function () {
        var _a = this.props, routeName = _a.routeName, _b = _a.routeParams, routeParams = _b === void 0 ? {} : _b, _c = _a.activeStrict, activeStrict = _c === void 0 ? false : _c, _d = _a.ignoreQueryParams, ignoreQueryParams = _d === void 0 ? true : _d;
        return this.router.isActive(routeName, routeParams, activeStrict, ignoreQueryParams);
    };
    BaseLink.prototype.callback = function (err, state) {
        if (!err && this.props.successCallback) {
            this.props.successCallback(state);
        }
        if (err && this.props.errorCallback) {
            this.props.errorCallback(err);
        }
    };
    BaseLink.prototype.clickHandler = function (evt) {
        var _a = this.props, onClick = _a.onClick, target = _a.target;
        if (onClick) {
            onClick(evt);
            if (evt.defaultPrevented) {
                return;
            }
        }
        var comboKey = evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey;
        if (evt.button === 0 && !comboKey && target !== '_blank') {
            evt.preventDefault();
            this.router.navigate(this.props.routeName, this.props.routeParams || {}, this.props.routeOptions || {}, this.callback);
        }
    };
    BaseLink.prototype.render = function () {
        /* eslint-disable */
        var _a = this.props, routeName = _a.routeName, routeParams = _a.routeParams, routeOptions = _a.routeOptions, className = _a.className, _b = _a.activeClassName, activeClassName = _b === void 0 ? 'active' : _b, activeStrict = _a.activeStrict, ignoreQueryParams = _a.ignoreQueryParams, route = _a.route, previousRoute = _a.previousRoute, router = _a.router, children = _a.children, onClick = _a.onClick, successCallback = _a.successCallback, errorCallback = _a.errorCallback, linkProps = __rest(_a, ["routeName", "routeParams", "routeOptions", "className", "activeClassName", "activeStrict", "ignoreQueryParams", "route", "previousRoute", "router", "children", "onClick", "successCallback", "errorCallback"]);
        /* eslint-enable */
        var active = this.isActive();
        var href = this.buildUrl(routeName, routeParams);
        var linkclassName = (active ? [activeClassName] : [])
            .concat(className ? className.split(' ') : [])
            .join(' ');
        return React.createElement('a', __assign(__assign({}, linkProps), { href: href, className: linkclassName, onClick: this.clickHandler }), children);
    };
    return BaseLink;
}(Component));

function withRouter(BaseComponent) {
    return function WithRouter(props) {
        return (React.createElement(routerContext.Consumer, null, function (router) { return React.createElement(BaseComponent, __assign({}, props, { router: router })); }));
    };
}

function withRoute(BaseComponent) {
    return function withRoute(props) {
        return (React.createElement(routeContext.Consumer, null, function (routeContext) { return React.createElement(BaseComponent, __assign({}, props, routeContext)); }));
    };
}

var RouteNodeRenderer = /** @class */ (function (_super) {
    __extends(RouteNodeRenderer, _super);
    function RouteNodeRenderer(props) {
        return _super.call(this, props) || this;
    }
    RouteNodeRenderer.prototype.shouldComponentUpdate = function (nextProps) {
        return shouldUpdateNode(this.props.nodeName)(nextProps.route, nextProps.previousRoute);
    };
    RouteNodeRenderer.prototype.render = function () {
        var _a = this.props, router = _a.router, route = _a.route, previousRoute = _a.previousRoute;
        return this.props.children({ router: router, route: route, previousRoute: previousRoute });
    };
    return RouteNodeRenderer;
}(React.Component));
var RouteNode = function (props) {
    return (React.createElement(routeContext.Consumer, null, function (routeContext) { return React.createElement(RouteNodeRenderer, __assign({}, props, routeContext)); }));
};

function routeNode(nodeName) {
    return function (BaseComponent) {
        function RouteNodeWrapper(props) {
            return (React.createElement(RouteNode, { nodeName: nodeName }, function (routeContext) { return (React.createElement(BaseComponent, __assign({}, props, routeContext))); }));
        }
        return RouteNodeWrapper;
    };
}

function useRouter() {
    return useContext(routerContext);
}

function useRoute() {
    return useContext(routeContext);
}

function useRouteNode(nodeName) {
    var router = useContext(routerContext);
    var _a = useState(function () { return ({
        previousRoute: null,
        route: router.getState()
    }); }), state = _a[0], setState = _a[1];
    useEffect(function () {
        return router.subscribe(function (_a) {
            var route = _a.route, previousRoute = _a.previousRoute;
            var shouldUpdate = shouldUpdateNode(nodeName)(route, previousRoute);
            if (shouldUpdate) {
                setState({
                    route: route,
                    previousRoute: previousRoute
                });
            }
        });
    }, []);
    return __assign({ router: router }, state);
}

var ConnectedLink = withRoute(BaseLink);
var Link = withRouter(BaseLink);
var Router = routerContext.Consumer;
var Route = routeContext.Consumer;

export { BaseLink, ConnectedLink, Link, Route, RouteNode, Router, RouterProvider, routeContext, routeNode, routerContext, useRoute, useRouteNode, useRouter, withRoute, withRouter };
